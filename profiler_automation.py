import os
import subprocess
import time

import requests as requests


def run_profiler():
    # NOTES:
    # PREREQUISITES:
    # There needs to be a sourcemap present in the to be instrumented files -> preferably using a bundler...
    # We need the commit data + teamscale information to do the automatic upload

    # Additionally, this is only suited for git as versioning system and requires the node package manager (npm)

    # step 1: instrument existing code (also link the original source files .ts etc.)
    # step 2: start coverage collector (using npx)
    # step 3: run program/test suite -> wait until done
    # step 4: stop coverage collector -> automatic upload to teamscale

    # IMPORTANT: the instrumentation is done in place, so the source files should ideally be a copy of the original,
    # and the instrumenter should not be run twice

    # path to the main directory of the teamscale-jacoco-agent
    JACOCO_PROFILER = 'teamscale-jacoco-agent'

    #path to the local config file
    CONFIG_FILE = 'profiler.properties'

    # path to the jacoco config file (generated by teamscale)
    JACOCO_CONFIG_FILE = 'jacocoagent.properties'

    # default exclude parameters
    EXCLUDE_PARAMS = ['**/node_modules/**/*', '**/*.min.js', '**/*.log.js']

    JAVA_FRAMEWORK = 'NONE'

    # data for setup of this script
    with open(CONFIG_FILE) as file:
        for line in file:
            if line.startswith("project_folder"):
                # path to project files
                PROJECT_FOLDER = line[line.find('='):]
            elif line.startswith("java_framework"):
                # command to run the tests
                JAVA_FRAMEWORK = line[line.find('='):]
            elif line.startswith("run_command"):
                # command to run the tests
                RUN_COMMAND = line[line.find('='):]
            elif line.startswith("include_params"):
                # include parameters (this should link to the original source files in case of a bundler used)
                INCLUDE_PARAMS = [line[line.find('='):]]
            elif line.startswith("exclude_params"):
                # exclude parameters (this should match any bundled files that should not be instrumented)
                EXCLUDE_PARAMS = [line[line.find('='):]]

    # get the repository commit from git properties for later automatic teamscale upload
    # NOTE: this requires git as versioning system
    TEAMSCALE_COMMIT = subprocess.getoutput(
        f'git -C {PROJECT_FOLDER} rev-parse --abbrev-ref HEAD') + ':' + subprocess.getoutput(
        f' git -C {PROJECT_FOLDER} --no-pager log -n1 --format="%ct000"')

    TEAMSCALE_REVISION = subprocess.getoutput(f' git -C {PROJECT_FOLDER} rev-parse HEAD')


    # data for teamscale upload
    with open(JACOCO_CONFIG_FILE) as file:
        for line in file:
            if line.startswith('teamscale-server-url'):
                TEAMSCALE_SERVER_URL = line[line.find('='):]
            elif line.startswith('teamscale-project'):
                TEAMSCALE_PROJECT_NAME = line[line.find('='):]
            elif line.startswith('teamscale-user'):
                TEAMSCALE_USER = line[line.find('='):]
            elif line.startswith('teamscale-access-token'):
                TEAMSCALE_ACCESS_TOKEN = line[line.find('='):]
            elif line.startswith('teamscale-partition'):
                TEAMSCALE_PARTITION = line[line.find('='):]

    TEAMSCALE_MESSAGE = 'Javascript coverage'

    # collector Port
    COL_ADDR = 'localhost'
    COL_PORT = '54678'

    #TODO: add bundling step

    # INSTRUMENTATION to be run: npx @teamscale/javascript-instrumenter \
    # SampleProject \
    # --collector localhost:54678 \
    # --in-place \
    # -e  '**/node_modules/**/*' -k '../../*.ts' -p filename_dump

    # instrument js code
    instrumenter = subprocess.Popen(
        ['npx', '@teamscale/javascript-instrumenter', PROJECT_FOLDER,
         '--collector', f'{COL_ADDR}:{COL_PORT}', '--in-place', '-x'] + EXCLUDE_PARAMS + ['-k'] + INCLUDE_PARAMS + [
            '-p', 'filename_dump'])
    instrumenter.wait()

    # COLLECTOR to be run: npx @teamscale/coverage-collector -p 54678
    # --teamscale-server-url http://localhost:8080/ --teamscale-project sampleproject
    # --teamscale-user admin --teamscale-access-token SiiKzph7AX4IgrUtFRSAsDRJgBiHDHi6
    # --teamscale-partition 'Manual Tests' --teamscale-commit main:2023:04:06:16:07:18
    # --teamscale-revision e7bcb1ecd3406aaa33487a0b38e1b7bdbb0b5417 --teamscale-message 'Javascript coverage'

    # start the collector
    collector = subprocess.Popen(
        ['npx', '@teamscale/coverage-collector', '-p', COL_PORT,
         '--teamscale-server-url', TEAMSCALE_SERVER_URL,
         '--teamscale-project', TEAMSCALE_PROJECT_NAME,
         '--teamscale-user', TEAMSCALE_USER,
         '--teamscale-access-token', TEAMSCALE_ACCESS_TOKEN,
         '--teamscale-partition', TEAMSCALE_PARTITION,
         '--teamscale-commit', TEAMSCALE_COMMIT,
         '--teamscale-revision', TEAMSCALE_REVISION,
         '--teamscale-message', TEAMSCALE_MESSAGE,
         '--enable-control-port', '9872'])

    # jvm arguments to attach the teamscale jaCoCo profiler
    jvmArgs = f'-javaagent:{JACOCO_PROFILER}/lib/teamscale-jacoco-agent.jar=config-file={JACOCO_CONFIG_FILE},logging-config={JACOCO_PROFILER}/logging/logback.debug.xml,teamscale-commit={TEAMSCALE_COMMIT}'

    # Set the Jacoco profiler as javaagent for maven
    if JAVA_FRAMEWORK.lower() == 'maven':
        os.environ[
            'MAVEN_OPTS'] = jvmArgs

    # Set the Jacoco profiler as javaagent for gradle
    ADDITIONAL_PARAMS = [f'-PjvmArgs="{jvmArgs}"'] if JAVA_FRAMEWORK.lower() == 'maven' else []

    # RUN TEST CASES
    # SampleProject/gradlew bootRun -p SampleProject
    tester = subprocess.Popen(
        RUN_COMMAND.split(' ') + ['-f', PROJECT_FOLDER] + ADDITIONAL_PARAMS
    )

    # wait for tests to end (depending on implementation of tests there may be the need to stop the tests externally)
    tester.wait()

    # force collector to upload to teamscale
    requests.post('http://' + COL_ADDR + ':9872/dump')

    time.sleep(1)

    collector.terminate()


# main:
run_profiler()
